Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NUMBER

Grammar

Rule 0     S' -> function
Rule 1     function -> RESERVED RESERVED LPAREN RPAREN LBRACE block RBRACE
Rule 2     block -> statement block
Rule 3     block -> statement
Rule 4     statement -> RESERVED IDENTIFIER SEMICOLON

Terminals, with rules where they appear

IDENTIFIER           : 4
LBRACE               : 1
LPAREN               : 1
NUMBER               : 
RBRACE               : 1
RESERVED             : 1 1 4
RPAREN               : 1
SEMICOLON            : 4
error                : 

Nonterminals, with rules where they appear

block                : 1 2
function             : 0
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . function
    (1) function -> . RESERVED RESERVED LPAREN RPAREN LBRACE block RBRACE

    RESERVED        shift and go to state 2

    function                       shift and go to state 1

state 1

    (0) S' -> function .



state 2

    (1) function -> RESERVED . RESERVED LPAREN RPAREN LBRACE block RBRACE

    RESERVED        shift and go to state 3


state 3

    (1) function -> RESERVED RESERVED . LPAREN RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 4


state 4

    (1) function -> RESERVED RESERVED LPAREN . RPAREN LBRACE block RBRACE

    RPAREN          shift and go to state 5


state 5

    (1) function -> RESERVED RESERVED LPAREN RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 6


state 6

    (1) function -> RESERVED RESERVED LPAREN RPAREN LBRACE . block RBRACE
    (2) block -> . statement block
    (3) block -> . statement
    (4) statement -> . RESERVED IDENTIFIER SEMICOLON

    RESERVED        shift and go to state 7

    block                          shift and go to state 8
    statement                      shift and go to state 9

state 7

    (4) statement -> RESERVED . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 10


state 8

    (1) function -> RESERVED RESERVED LPAREN RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 11


state 9

    (2) block -> statement . block
    (3) block -> statement .
    (2) block -> . statement block
    (3) block -> . statement
    (4) statement -> . RESERVED IDENTIFIER SEMICOLON

    RBRACE          reduce using rule 3 (block -> statement .)
    RESERVED        shift and go to state 7

    statement                      shift and go to state 9
    block                          shift and go to state 12

state 10

    (4) statement -> RESERVED IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 13


state 11

    (1) function -> RESERVED RESERVED LPAREN RPAREN LBRACE block RBRACE .

    $end            reduce using rule 1 (function -> RESERVED RESERVED LPAREN RPAREN LBRACE block RBRACE .)


state 12

    (2) block -> statement block .

    RBRACE          reduce using rule 2 (block -> statement block .)


state 13

    (4) statement -> RESERVED IDENTIFIER SEMICOLON .

    RESERVED        reduce using rule 4 (statement -> RESERVED IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 4 (statement -> RESERVED IDENTIFIER SEMICOLON .)

